# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wrA9zYjKnN2vI4hZ1UCklnMNQ25nB3r-

> Introdução à Ciência dos Dados \
> Ciência da Computação – UFV/Florestal


* **Nome:** Vinícius de Oliveira Mendes
* **Matrícula:**  3881

# Aula Prática 06
## Visualização de Dados

**Objetivo:** Entender comandos para explorar dados visualmente por meio de gráficos.
**Pré-requisitos:** Linguagem de programação Python, estatística básica \
**Meta:** Ao final da prática, o aluno será capaz de analisar um conjunto de dados visualmente para ajudar na tomada de decisões.

----
"""

### NÃO REMOVA ESSA CÉLULA! ####
!pip --no-cache-dir install --upgrade learntools_dados_ufv

!wget https://raw.githubusercontent.com/gfviegas/CCF425-resources/master/p6/OnlineRetail.xlsx

#### Não altere essa célula!!! ####
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# Roteiro

## Leitura dos dados
Veja os dados do arquivo `OnlineRetail.xlsx`. 

Note que o arquivo é um Excel. A biblioteca consegue ler e o interpretar da mesma maneira que um CSV, como estamos acostumados.

Note que a função usada é a `read_excel` e não a `read_csv`.

É normal que demore um pouco, pois os arquivos em excel possuem muito mais recursos e dados armazenados do que um simples csv.
"""

df = pd.read_excel('./OnlineRetail.xlsx')
df

"""### Filtrar quantidades e preços unitários negativos"""

df = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0)]
df

"""## Visualizar os dados

### Gráfico de Pontos (_Scatter Plot_)
"""

df.plot(kind='scatter', x='UnitPrice', y='Quantity', color='orange', label='Transação')
# Adiciona um rótulo no eixo Y
plt.ylabel('Quantidade')
# Adiciona um rótulo no eixo X
plt.xlabel('Preço Unitário')

plt.show()

"""### Usar escala logarítmica nos dois eixos para melhorar a visualização
Também vamos gerar um gráfico colorindo e marcando por país
"""

countries_colors = {
    'Brazil': '#FAA916',
    'USA': '#0FA3B1',
    'Canada': '#BB4430'
}

fig, ax = plt.subplots()
countries_data = list(map(lambda k: (k, df[df['Country'] == k]), countries_colors.keys()))
[ax.scatter(x=d['UnitPrice'], y=d['Quantity'], c=countries_colors[k], label=k) for (k, d) in countries_data]

plt.ylabel('Quantidade')
plt.xlabel('Preço Unitário')
plt.xscale('log')
plt.yscale('log')
ax.legend() # Habilita a legenda das cores
plt.show()

"""### Usar um terceiro atributo para definir o tamanho do marcador

Veja o argumento `s` (de size) da função scatter
"""

df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

fig, ax = plt.subplots()
countries_data = list(map(lambda k: (k, df[df['Country'] == k]), countries_colors.keys()))
[ax.scatter(x=d['UnitPrice'], y=d['Quantity'], c=countries_colors[k], s=d['TotalPrice'], label=k) for (k, d) in countries_data]

plt.ylabel('Quantidade')
plt.xlabel('Preço Unitário')
plt.xscale('log')
plt.yscale('log')
ax.legend() # Habilita a legenda das cores
plt.show()

"""### Agrupar antes de exibir os gráficos
Agrupando pelo `InvoiceNo`
"""

group_invoice = df.groupby('InvoiceNo')

group_invoice.sum().plot.scatter(x='Quantity', y='TotalPrice', c='#EF2D56')
plt.xlabel('Quantidade')
plt.ylabel('Preço Total')
plt.show()

"""### Gerar o mesmo gráfico anterior na escala logarítmica"""

group_invoice = df.groupby('InvoiceNo')

group_invoice.sum().plot.scatter(x='Quantity', y='TotalPrice', c='#EF2D56')
plt.xlabel('Quantidade')
plt.ylabel('Preço Total')
plt.xscale('log')
plt.yscale('log')
plt.show()

"""### Plotar gráfico de linha para avaliar tendência.
Agrupar as compras por data e mostrar a quantidade de itens por data da compra.
"""

group_date = df.groupby('InvoiceDate')
group_date.sum()['Quantity'].plot(c='#EF2D56')
plt.xlabel('Data Compra')
plt.ylabel('Quantidade')
plt.show()

"""### Agrupar por Mês/Ano"""

df['MonthYear'] = df['InvoiceDate'].dt.strftime('%m/%Y')

group_month_year = df.groupby('MonthYear')
group_month_year.sum()['Quantity'].plot(c='#EF2D56')
plt.xlabel('Data Compra')
plt.ylabel('Quantidade')
plt.show()

"""### Plotar gráfico de barras para mostrar valores para atributos categóricos"""

group_invoice.sum().iloc[0:9]['Quantity'].plot(kind='bar', color='#EF2D56')
plt.xlabel('Número da NF')
plt.ylabel('Quantidade')
plt.show()

"""### Plotar Histograma"""

group_invoice.sum()['TotalPrice'].plot(kind='hist', color='#EF2D56')
plt.xlabel('Preço Total')
plt.ylabel('Quantidade')
plt.show()

"""### Filtrar para visualizar melhor a maioria
O gráfico acima possui uma concentração em valores menores mas possui alguns outliers com preço **muito** superior à maioria. Vamos resolver isso com um filtro.
"""

group_invoice.sum().loc[group_invoice.sum()['TotalPrice'] < 1000]['TotalPrice'].plot(kind='hist', color='#EF2D56')
plt.xlabel('Preço Total')
plt.ylabel('Quantidade')
plt.show()

"""### Alterar número de bins para ter mais detalhes"""

group_invoice.sum().loc[group_invoice.sum()['TotalPrice'] < 1000]['TotalPrice'].plot(kind='hist', color='#EF2D56', bins=100)
plt.xlabel('Preço Total')
plt.ylabel('Quantidade')
plt.show()

"""### Plotar um BoxPlot"""

group_invoice.sum()['TotalPrice'].plot.box(color='#EF2D56')
plt.ylabel('Preço')
plt.show()

"""### Usar escala logarítmica para ver melhor"""

group_invoice.sum()['TotalPrice'].plot.box(color='#EF2D56')
plt.ylabel('Preço')
plt.yscale('log')
plt.show()

"""### Filtrar para valores menores"""

group_invoice.sum().loc[group_invoice.sum()['TotalPrice'] < 1000]['TotalPrice'].plot.box(color='#EF2D56')
plt.ylabel('Preço Total')
plt.show()

"""### Plotar boxplots agrupados por país"""

df.boxplot('TotalPrice', by='Country', rot=90, figsize=(15, 5), color='purple')
plt.ylabel('Preço Total')
plt.yscale('log')
plt.show()

"""# Exercícios

Execute e não remova a célula abaixo antes de iniciar os exercícios. Faça todas as atividades manipulando a variável `df`.
"""

# Atribui o dataframe com o estado "original" em uma variável isolada
original_df = pd.read_excel('./OnlineRetail.xlsx')
df = original_df
df

"""## 1. Faça um gráfico de barras mostrando a quantidade total vendida de cada um dos 10 primeiros produtos que aparecem no Dataframe.
Essa lista não possui correção automática.
"""

# Resposta da 1.
filter = df['StockCode'].head(10)
quantidade = df.groupby('StockCode').sum()
quantidade = quantidade.loc[filter.array]['Quantity']
quantidade.plot(kind='bar', x='StockCode', y='Quantity', color='purple', label = 'Quantidade')
# Adiciona um rótulo no eixo Y
plt.ylabel('Quantidade vendida')
# Adiciona um rótulo no eixo X
plt.xlabel('Produtos vendidos')

plt.show()

"""## 2. Faça um Boxplot dos preços unitários dos produtos. Considere somente os 10 produtos mais vendidos.
Essa lista não possui correção automática.
"""

# Resposta da 2.
# filter = df['StockCode'].head(10)
# quantidade = df.groupby('StockCode').sum()
# quantidade = quantidade.loc[filter.array]['UnitPrice']
quantidade = df.groupby('StockCode')['Quantity'].sum().sort_values(ascending = False).head(10).index
quantidade = df[df.StockCode.isin(quantidade)]['UnitPrice'] 
# quantidade
quantidade.plot.box(color = 'purple')

"""## 3. Faça um gráfico de linhas mostrando o faturamento (total de preços das vendas) por dia.
Essa lista não possui correção automática.
"""

# Resposta da 3.
df['Day'] = df['InvoiceDate'].dt.strftime('%d')
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']
group_month_year = df.groupby('Day')
group_month_year.sum()['TotalPrice'].plot(c='#EF2D56')
plt.xlabel('Preço')
plt.ylabel('Quantidade')
plt.show()

"""## 4. Faça o histograma da média dos preços unitários dos produtos.
Essa lista não possui correção automática.
"""

# Resposta da 4.
df.groupby('StockCode')['UnitPrice'].mean().plot(kind = 'hist')
plt.yscale('log')

"""## 5. Faça dois gráficos de barras, sendo um da quantidade de compras e outro do total de faturamento por país.
Essa lista não possui correção automática.
"""

# Resposta da 5.
# Gráfico 1 - Quantidade de compras
df.groupby('Country')['Quantity'].sum().plot.bar()
plt.yscale('log')

# Resposta da 5.
# Gráfico 2 - Total de faturamento no país
df.groupby('Country')['TotalPrice'].sum().plot.bar()
plt.yscale('log')

"""## 6. Considerando os 100 produtos mais vendidos, é possível visualizar alguma diferença entre a distribuição dos preços unitários desses produtos ao se comparar os países “Australia” e “United Kingdom”? Faça um ou mais gráficos para ajudar a responder.
Essa lista não possui correção automática.
"""

# Resposta da 6.

quantidade = df.groupby('StockCode')['Quantity'].sum().sort_values(ascending = False).head(100).index
quantidadeUK = df[(df['StockCode'].isin(quantidade)) & (df['Country']=='United Kingdom')]
quantidadeAU = df[(df['StockCode'].isin(quantidade)) & (df['Country']=='Australia')]
sns.histplot(quantidadeUK['UnitPrice'],kde=True,color = "blue")
sns.histplot(quantidadeAU['UnitPrice'],kde=True,color = "red")

plt.show()
# quantidadeUK
# quantidadeAU

"""## 7. Faça um gráfico de barras, de linhas, histograma e boxplot usando a biblioteca `seaborn`.
Essa lista não possui correção automática.

A biblioteca já está importada pelo nome de `sns`. Vai um gráfico de exemplo abaixo ;)
"""

country_group_sum = df.groupby('Country').sum().reset_index()
plt.figure(figsize=(10,10))

g=sns.barplot(data=country_group_sum, y='Country', x='Quantity', orient='h')
g.set_xscale('log')

plt.show()

# Faça outro gráfico de barras com o Seaborn aqui
fig, ax = plt.subplots(figsize=(10,10))
sns.barplot(x='TotalPrice', y="Country", data=df)

# Faça outro gráfico de linhas com o Seaborn aqui
fig, ax = plt.subplots(figsize=(10,10))
quantidade = df.groupby('StockCode')['Quantity'].sum().sort_values(ascending = False).head(10).index
quantidade = df[df.StockCode.isin(quantidade)]['UnitPrice']
sns.lineplot(x=quantidade, y="Country", data=df)

# Faça outro gráfico de histograma com o Seaborn aqui
# fig, ax = plt.subplots(figsize=(20,10))
sns.displot(x='TotalPrice', y='Country', data=df)

# Faça outro gráfico de boxplot com o Seaborn aqui
fig, ax = plt.subplots(figsize=(30,10))
sns.boxplot(x = 'Country', y='TotalPrice', data = df  )
plt.ylabel('Preço Total')
plt.yscale('log')
plt.show()

"""## 7. Faça uma breve análise e comparação dos plots feitos com o `seaborn` e com o `matplotlib`.
Qual você gostou mais? Viu alguma diferença em performance neles?

Resposta da 7.: O seaborn, apesar de mais pesado, consegue deixar os gráficos mais bonitos e com mais efeitos, entretanto, torna-se mais complicado seu entendimento. Já o matplotlib, é bastante útil quando não requer tanto requinte na demonstração.
"""