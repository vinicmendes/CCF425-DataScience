# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B3xmJBf81Z5avxIvdmn4iIq62ktCNmZ-

> Introdução à Ciência dos Dados \
> Ciência da Computação – UFV/Florestal


* **Nome:** Vinícius de Oliveira Mendes
* **Matrícula:**  3881

# Aula Prática 05
## Análise Exploratória de Dados

**Objetivo:** Entender comandos para filtro e preparação de dados.
**Pré-requisitos:** Linguagem de programação Python, estatística básica \
**Meta:** Ao final da prática, o aluno será capaz de analisar um conjunto de dados e filtrar e conhecer melhor os dados.

----
"""

### NÃO REMOVA ESSA CÉLULA! ####
!pip --no-cache-dir install --upgrade learntools_dados_ufv

!wget https://raw.githubusercontent.com/gfviegas/CCF425-resources/master/p5/OnlineRetail.xlsx

#### Não altere essa célula!!! ####
import pandas as pd


from learntools_dados_ufv.core import binder; binder.bind(globals())
from learntools_dados_ufv.ccf425.pratica_5 import *

"""# Roteiro

## Leitura dos dados
Veja os dados do arquivo `OnlineRetail.xlsx`. 

Note que o arquivo é um Excel. A biblioteca consegue ler e o interpretar da mesma maneira que um CSV, como estamos acostumados.

Note que a função usada é a `read_excel` e não a `read_csv`.

É normal que demore um pouco, pois os arquivos em excel possuem muito mais recursos e dados armazenados do que um simples csv.
"""

df = pd.read_excel('./OnlineRetail.xlsx')
df

"""## Explorar os dados

### Verificar quais atributos (colunas) fazem parte dos dados
"""

df.columns

"""### Verificar o tipo de cada atributo"""

df.dtypes

"""### Avaliar alguns objetos"""

# Veja os 5 primeiros registros
df.head(5)

# Veja os 10 últimos registros
df.tail(10)

"""### Calcular o número de objetos"""

# Número de instâncias/objetos/linhas
len(df)

"""### Verificar a forma (instâncias, atributos)"""

# O primeiro elemento da tupla é a quantidade de instâncias, e o segundo elemento a quatnidade de atributos/colunas
df.shape

"""### Contar objetos de cada valor distinto para um atributo"""

# Conta quantas vezes cada item aparece em uma coluna
df['Description'].value_counts()

"""### Mostrar a taxa de objetos de cada valor distinto para um atributo"""

# Faz a normalização com o percentual de cada valor
df['Description'].value_counts(normalize=True)

"""### Verificar quantos valores ausentes existes em um atributo"""

# A função retorna se os valores são nulos ou não. Ou seja, False == existe um valor para a linha | True == o valor é nulo.
pd.isnull(df['Description']).value_counts()

"""### Apagar os objetos com valores nulos/ausentes de alguma coluna"""

df = df.dropna(axis=0, subset=['Description'])
pd.isnull(df['Description']).value_counts()

"""### Filtrar por índice da linha"""

df.loc[2]

"""### Filtrar por faixa de índices"""

df[2:8]

"""### Filtrar pelo nome de uma coluna """

# Recupera somente a descrição dos 5 primeiros registros
df['Description'].head(5)

"""### Filtrar por mais de uma coluna"""

df[['Description', 'InvoiceNo']].head(5)

"""### Filtrar por índice de linha em uma coluna específica"""

# Qual o valor da coluna "Description" na 5ª linha?
df.loc[5, 'Description']

"""### Filtrar pelos valores de uma coluna"""

df[df['Country'] == 'Brazil'].head()

"""### Filtrar utilizando expressões lógicas"""

df[(df['Country'] == 'Brazil') & (df['Quantity'] > 15)].head()

df[((df['Country'] == 'Brazil') & (df['Description'] == 'PINK REGENCY TEACUP AND SAUCER')) | ((df['Country'] == 'Japan') & (df['Quantity'] > 1000))].head()

"""### Criar um novo atributo derivado em outros"""

df['TotalPrice'] = (df['Quantity'] * df['UnitPrice'])
df.head()

"""### Apagar uma instância por índice da linha"""

# Apagando a terceira linha
df2 = df.drop(2)
df2.head()

"""### Apagar uma coluna"""

df2 = df2.drop('TotalPrice', axis=1)
df2

"""### Criar um índice por um atributo"""

# Índices ajudam a filtrar
df = df.set_index('InvoiceNo')

df.loc[536365]

"""### Cancelar os índices que foram criados"""

df = df.reset_index()
df.index

"""### Filtrar e calcular valores estatísticos de um atributo com valores numéricos"""

df[df['Country'] == 'Brazil']['UnitPrice'].mean()

df[df['Country'] == 'France']['UnitPrice'].mean()

df[df['Country'] == 'Brazil']['Quantity'].median()

df[df['Country'] == 'Japan']['Quantity'].median()

"""### Agrupar por um atributo e calcular estatísticas desse grupo"""

df_gb_description = df.groupby('Description')

df_gb_description['UnitPrice'].count().head()

df_gb_description['Country'].count().head()

df_gb_description['UnitPrice'].sum().head()

"""# Exercícios

Execute e não remova a célula abaixo antes de iniciar os exercícios. Faça todas as atividades manipulando a variável `df`.
"""

# Atribui o dataframe com o estado "original" em uma variável isolada
original_df = pd.read_excel('./OnlineRetail.xlsx')
df = original_df
df

"""## 1. Recupere a quantidade de instâncias com Notas Fiscais ausentes/nulas
Armazene-a na variável `missing_invoice_no`.

Chame a função `q1.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q1.hint()`
"""

# q1.hint()
dataf = pd.isnull(df['InvoiceNo'])
missing_invoice_no = len(dataf[dataf == True])
display(missing_invoice_no)
q1.check()

"""## 2. Recupere a quantidade de instâncias com Preço Unitário menor que zero.
Armazene-a na variável `invalid_unit_price`.

Chame a função `q2.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q2.hint()`
"""

# q2.hint()
up = df['UnitPrice']
invalid_unit_price = len(up[up<0])

q2.check()

"""## 3. Remova todos as instâncias que possui o Preço Unitário inválido.
Reatribua o dataframe filtrado na variável `df`.

Chame a função `q3.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q3.hint()`
"""

# q3.hint()
up = df['UnitPrice']
up = up[up<0]
df = df.drop(up.index)

q3.check()

"""## 4. Recupere o ID do Cliente que comprou mais itens.
Armazene-o na variável `top_customer_id`.

Chame a função `q4.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q4.hint()`
"""

# q4.hint()
client = df.groupby("CustomerID").count()["Quantity"].sort_values().tail(1).index[0]
# display(client)
top_customer_id =int(client)

q4.check()

"""## 5. Recupere a descrição do produto mais caro vendido.
Armazene-o na variável `most_expensive_product`.

Chame a função `q5.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q5.hint()`
"""

# q5.hint()
up = df[df.UnitPrice == df.UnitPrice.max()]
most_expensive_product = up['Description'].iloc[[0]].squeeze()
display(most_expensive_product)
q5.check()

"""## 6. Recupere a % relativa das instâncias atribuídas ao país `Germany` excluindo o país `United Kingdom` da base.
Armazene-a na variável `germany_orders_percentage`.

Chame a função `q6.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q6.hint()`
"""

# q6.hint()
aux = df[df['Country'] != 'United Kingdom']

germany_orders_percentage = (aux[aux['Country'] == 'Germany'].shape[0] / aux.shape[0]) * 100
display(germany_orders_percentage)
q6.check()

"""## 7. Recupere a(s) instância(s) da compra que possui mais itens.
Armazene-a na variável `most_items_order`.

Chame a função `q7.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q7.hint()`
"""

# q7.hint()

most_items_order = df[df['Quantity'] == df['Quantity'].max()]
display(most_items_order)
q7.check()

"""## 8. Recupere o identificador da compra mais cara.
Armazene-a na variável `most_expensive_order`.

Chame a função `q8.check()` no fim da célula para verificar a resposta.
Você pode pedir dicas com `q8.hint()`
"""

# q8.hint()
df['TotalPrice'] = (df['Quantity'] * df['UnitPrice'])
most_expensive_order = df[df['TotalPrice'] == df['TotalPrice'].max()].InvoiceNo.values[0]
display(most_expensive_order)
q8.check()

"""## 9. Responda as questões abertas a seguir:

### 9.a) Qual o objetivo das estatísticas descritivas?

RESPOSTA: É a estatística que está preocupada em sintetizar os dados de maneira direta, preocupando-se menos com variações e intervalos de confiança dos dados e buscando descrever os dados observados.

### 9.b) Liste 3 perguntas que poderiam ser respondidas utilizando estatística descritiva com o conjunto de dados trabalhados nessa prática.

RESPOSTA:

Pergunta 1:Recupere a descrição da instância que comprou menos itens.

Pergunta 2:Recupere a data da instância que comprou menos itens.

Pergunta 3:Recupere em que o nome dos países aparecem no dataframe.

### 9.c) Tente responder essas 3 perguntas acima com evidências usando as funcionalidades aprendidas.

RESPOSTA:
"""

#QUESTÃO 1
up = df[df.Quantity == df.Quantity.min()]
menos_caro = up['Description'].iloc[[0]].squeeze()
display(menos_caro)

#QUESTÃO 2
data = up['InvoiceDate'].iloc[[0]].squeeze()
display(data)

#QUESTÃO 3
display(df['Country'].value_counts())

"""### 9.d) Você acha que estatística descritiva é útil para fazer inferência ou predições? Justifique.

RESPOSTA: Sim, pois o objetivo da estatística descritiva é o de sintetizar uma série de valores de mesma origem, permitindo ter uma visão geral da variação deles e organizá-los/descrevê-los, para que ,haja a possibilidade de realizar inferências e predições.
"""